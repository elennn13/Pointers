#include <iostream>

void myswap(int num1, int num2) {
    int tmp = num1;
    num1 = num2;
    num2 = tmp;
}

void pswap(int* pointer1, int* pointer2) {
    int tmp = *pointer1;
    *pointer1 = *pointer2;
    *pointer2 = tmp;
}

void p_sum_arr(int arr[], const int length, int* var);

int main(){
    setlocale(LC_ALL,"ru");
    int n, m;
   
    // УКАЗАТЕЛИ НА ПЕРЕМЕННЫЕ
  
    n = 7;
    std::cout << "n = " << n << std::endl; //обращение к значению переменной
    std::cout << "&n = " << &n << std::endl;//-оператор для обращения к адресу//вывод адреса переменной n с помощью оператора &

    // Указатель - переменная, созданная для хранения в себе адреса какой-либо 
    // области памяти. Например, указатель может хранить адрес созданной ранее 
    // в программе переменной

    int* pn = &n;// p + _имя переменной_ создание указателя на область памяти типа int и присваивание ему значения в виде адреса n
    std::cout << "pn = " << pn << std::endl;// вывод значения указателя (шестнадцатеричный адрес перменной n) 
    std::cout << "*pn = " << *pn << std::endl;// вывод значения n через разыменование указателя
    //* - это Разыменование  - операция применяемая исключительно к указателям
    //  или адресам памяти с целью обращения к тому участку памяти, на который
    //  они направлены

    *pn = 15;// изменение значения n черещ разыменования указателя
    std::cout << "n = " << n << std::endl;

    std::cout << "---------------------------\n";;


    m = 42;
    pn = &m;
    std::cout << "m = " << m << std::endl; 
    std::cout << "&m = " << &m << std::endl;

    pn = &m;// "перенаправление" указателя на переменную n 
    std::cout << "pn = " << pn << std::endl;
    std::cout << "*pn = " << *pn << std::endl;


    int* pm = &m;
    std::cout << "pm = " << pm << std::endl;
   

    const int size = 5;
    int arr[size]{ 30, 40, 50, 60, 70 };

    int* parr2 = &arr[2];
    std::cout << parr2 << std::endl;
    std::cout << *parr2 << std::endl;

    // Арифметика указателей - процесс перемещения указателя на другие 
    // соседние участки памяти путем применения  опреаций сложения и вычитания 
   
    // Формула изменения адреса 
    // pointer + a = pointer + a * type_size


    parr2++;
    std::cout << parr2 << std::endl;
    std::cout << *parr2 << std::endl;

    parr2 = &arr[0];
    for (int i = 0; i < size; i++)
        std::cout << *(parr2 + i) << ' ';
    std::cout << std::endl;

    std::cout << arr << std::endl;
    // Указатели и массивы
     
    // Ограничение арифметики указателей:
    // 1. Нельзя делить и умножать значения указателей;
    // 2. Арифметика указателец может работать только с целыми числами(нельзя применять с вещественными числами);
    // 3. Нельзя складывать значения указателей между собой, но можно вычиттать из указателя другой указатель.
    // 4. По отношению к указателям можно применять операции сравнений ( >,<,>=,<=,==,!=).


    // Указатели и функции
    n = 7; m = 15;
    
    std::cout << n << ' ' << m << std::endl;
   // myswap(n, m) - т.к не работает параметры - это копии передаваемых значений 

    pswap(&n, &m);
    std::cout << n << ' ' << m << std::endl;
    // Области применения указателей:
 
   // 1. Реализация массивов в программировании;
   // 2. Косвенный доступ к элементам за пределами  их области видимости; 
   // 3. Экономия памяти. 
   // 4. Работа с динамической памятью; 
   // 5. Реализация полиморфизма в ООП. 
   // 6. Создание динамических структур данных.
  
    // Размер указателей в байтах не зависит от типа данных, на который 
    // они направленны. Он зависит от архитектуры системы, для которой 
    // пишется приложение. Так, например,  в OC Windows с разрядностью 
    // х32 размер указателя - 4 байта,  а с разрядностью х64 - 8 байт.

    // Задача 1
    // Создайте функцию void, которая принимает массив, длину и адрес 
    // переменной. Функция считает сумму всех элементов массива и записыва 
    // ее в переменную, адрес которой был передан.

    std::cout << "Задача1.\nМассив:\n";
    const int size1 = 5;
    int arr1[size1]{ 15, 5, 6, 7, 10 };
    for (int i = 0; i < size1; i++)
        std::cout << arr1[i] << ' ';
    std::cout << std::endl;


    int sum;
    p_sum_arr(arr1, size1, &sum);
    std::cout << "Сумма элементов = " << sum << std::endl;


    return 0;

}
void p_sum_arr(int arr[], const int length, int* var) {
    *var = 0;
    for (int i = 0; i < length; i++)
        *var += arr[i];
    }
